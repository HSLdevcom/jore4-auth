package fi.hsl.jore4.auth.apipublic.v1

import com.nimbusds.oauth2.sdk.AuthorizationCode
import com.nimbusds.oauth2.sdk.id.State
import fi.hsl.jore4.auth.common.ApiUtil.createRedirect
import fi.hsl.jore4.auth.oidc.OIDCCodeExchangeService
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiParam
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.ResponseStatus
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.util.UriComponentsBuilder
import java.net.URI
import javax.servlet.http.HttpSession

/**
 * OIDC token exchange endpoint controller.
 *
 * Provides the endpoint for exchanging an OIDC authorization code for tokens.
 */
@RestController
class OIDCCodeExchangeApiController(
    private val codeExchangeService: OIDCCodeExchangeService,
    @Value("\${self.public.base.url}") private val publicSelfBaseUrl: String,
    @Value("\${api.path.prefix.public}") private val publicApiPrefix: String
) {
    companion object {
        private val LOGGER: Logger = LoggerFactory.getLogger(OIDCCodeExchangeApiController::class.java)

        const val EXCHANGE_ENDPOINT_PATH_SUFFIX = "/v1/oidc/exchange"
    }

    /**
     * The callback URI pointing to our base URL.
     */
    val callbackUri: URI = UriComponentsBuilder
        .fromUriString(publicSelfBaseUrl)
        .path("$publicApiPrefix$EXCHANGE_ENDPOINT_PATH_SUFFIX")
        .build()
        .encode()
        .toUri()

    @ApiOperation(
            "This endpoint is invoked by the OIDC provider and will exchange the given authorization code for an " +
                    "access and a refresh token. After a successful code exchange, this endpoint will eventually redirect to the " +
                    "configured login page."
    )
    @ApiResponses(
            ApiResponse(code = 302, message = "Redirects to the configured login page."),
            ApiResponse(code = 401, message = "The authenticity of the request cannot be verified.")
    )
    @ResponseStatus(HttpStatus.FOUND)
    @RequestMapping(method = [RequestMethod.GET], value = ["\${api.path.prefix}$EXCHANGE_ENDPOINT_PATH_SUFFIX"])
    /**
     * This endpoint is not defined in the OpenAPI specs, since it is for internal use only. It is only provided by
     * us as a callback and should not be called under any other circumstances.
     */
    fun exchangeCode(
            @ApiParam("The authorization code passed on by the OIDC provider.")
            @RequestParam
            code: String,
            @ApiParam("The state to verify the requests authenticity (the state has been generated by us before invoking the OIDC provider's login endpoint).")
            @RequestParam
            state: String,
            session: HttpSession
    ): ResponseEntity<Void> {

        LOGGER.info("Exchanging authorization code...")

        val redirectUri = codeExchangeService.exchangeCodeAndRedirect(
            AuthorizationCode(code), State(state), session,
            callbackUri
        )

        LOGGER.info("Code exchanged. Redirecting to {}", redirectUri)

        return createRedirect(redirectUri)
    }
}
